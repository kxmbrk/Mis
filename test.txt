    function moveRouteUp(event, routeStr) {
        event.preventDefault();

        for (var i = 0; i < model.Routes.length; ++i) {
            var route = model.Routes[i];
            if (route.Route === routeStr) {
                if (i === 0) return false;

                var routeToSwap = model.Routes[i - 1];
                model.Routes[i - 1] = route;
                model.Routes[i] = routeToSwap;

                var tempScrollTop = $(window).scrollTop();

                var htmlRoute = $('#' + trimIllegalIdChars(route.Route));
                var htmlRouteToSwap = $('#' + trimIllegalIdChars(routeToSwap.Route));

                htmlRoute.insertBefore(htmlRouteToSwap);
                $(window).scrollTop(tempScrollTop);

                indicateLastMovedRow(htmlRoute);

                break;
            }
        }
    }

    function moveRouteDown(event, routeStr) {
        event.preventDefault();

        for (var i = 0; i < model.Routes.length; ++i) {
            var route = model.Routes[i];
            if (route.Route === routeStr) {
                if (i === (model.Routes.length - 1)) return false;

                var routeToSwap = model.Routes[i + 1];
                model.Routes[i + 1] = route;
                model.Routes[i] = routeToSwap;

                var tempScrollTop = $(window).scrollTop();

                var htmlRoute = $('#' + trimIllegalIdChars(route.Route));
                var htmlRouteToSwap = $('#' + trimIllegalIdChars(routeToSwap.Route));

                htmlRoute.insertAfter(htmlRouteToSwap);
                $(window).scrollTop(tempScrollTop);

                indicateLastMovedRow(htmlRoute);

                break;
            }
        }
    }

    function updateOperTable(route, lastMovedOperNum) {
        var markup = '';
        if (route) {

            markup += '<table class="full-width">'
                + '<thead>'
                + '   <tr>'
                + '       <th>Oper</th>'
                + '       <th>Description</th>'
                + '       <th>Mvin Ins</th>'
                + '       <th>Mvout Ins</th>'
                + '       <th>Tools</th>'
                + '       <th>Splits</th>'
                + '       <th>Edc</th>'
                + '       <th>Flow Control</th>'
                + '       <th>Move</th>'
                + '   </tr>'
                + '</thead>'
                + '<tbody id="opers-tbody">';

            for (var o = 0; o < route.Opers.length; ++o) {
                var oper = route.Opers[o];

                markup += '<tr id="' + trimIllegalIdChars(route.Route) + '-' + oper.Oper.toString() + '" class="oper-row' + (lastMovedOperNum === oper.Oper ? ' last-moved-row' : '') + '">'
                    + '    <td><a href="#" class="oper-link" onclick="javascript:editOper(\'' + route.Route + '\', ' + oper.Oper.toString() + ')">' + oper.Oper.toString() + '</a></td>'
                    + '    <td>' + oper.OperShortDesc + '</td>'
                    + '    <td>' + oper.SpecIns + '</td>'
                    + '    <td>' + oper.SpecInsMvout + '</td>'
                    + '    <td>' + oper.Tools + '</td>'
                    + '    <td>' + oper.RecipeSplitGroup + '</td>'
                    + '    <td>' + oper.EdcOptions + '</td>'
                    + '    <td>' + oper.FlowControl + '</td>'
                    + '    <td class="move-arrows">'
                    + '        <a href="#" class="up" onclick="javascript:moveOperUp(event, \'' + route.Route + '\', ' + oper.Oper.toString() + ')"><i class="fa fa-arrow-up"></i></a> | '
                    + '        <a href="#" class="down" onclick="javascript:moveOperDown(event, \'' + route.Route + '\', ' + oper.Oper.toString() + ')"><i class="fa fa-arrow-down"></i></a>'
                    + '    </td>'
                    + '</tr>'
            }

            markup += '</tbody>'
                + '</table>';
        }

        $("#opers").show();
        $("#opers").html(markup);
    }

    lastMovedRowsContext = {};
    function indicateLastMovedRow(lastMovedRow) {
        var r = lastMovedRowsContext[lastMovedRow.attr('id')];
        if (r && r.__fadeOutLastMoved) {
            clearTimeout(r.__fadeOutLastMoved);
            r.__fadeOutLastMoved = null;
            lastMovedRow.removeClass('last-moved-row fade-out');

            if (r.__fadeOutLastMoved2) {
                clearTimeout(r.__fadeOutLastMoved2);
                lastMovedRow.removeClass('last-moved-row fade-out');
                r.__fadeOutLastMoved2 = null;
            }
        }

        lastMovedRow.addClass('last-moved-row');

        if (!r) {
            r = lastMovedRowsContext[lastMovedRow.attr('id')] = {};
        }

        r.__fadeOutLastMoved = setTimeout(function () {
            lastMovedRow.addClass("fade-out");
            r.__fadeOutLastMoved2 = setTimeout(function () {
                lastMovedRow.removeClass('last-moved-row fade-out');
                r.__fadeOutLastMoved = null;
                r.__fadeOutLastMoved2 = null;
            }, 3000);
        }, 2000);
    }

    function showOpers(routeStr) {
        for (var i = 0; i < model.Routes.length; ++i) {
            var route = model.Routes[i];

            if (route.Route === routeStr) {
                updateOperTable(route);
                break;
            }
        }
    }

    function moveOperUp(event, routeStr, operNum) {
        event.preventDefault();

        var didUpdateOperTable = false;

        for (var i = 0; i < model.Routes.length; ++i) {
            var route = model.Routes[i];
            if (route.Route === routeStr) {
                for (var o = 0; o < route.Opers.length; ++o) {
                    var oper = route.Opers[o];

                    if (oper.Oper === operNum) {
                        if (o === 0) return false;

                        var operToSwap = route.Opers[o - 1];
                        route.Opers[o - 1] = oper;
                        route.Opers[o] = operToSwap;

                        var tempScrollTop = $(window).scrollTop();

                        var htmlOper = $('#' + trimIllegalIdChars(route.Route) + '-' + oper.Oper.toString());
                        var htmlOperToSwap = $('#' + trimIllegalIdChars(route.Route) + '-' + operToSwap.Oper.toString());

                        htmlOper.insertBefore(htmlOperToSwap);
                        $(window).scrollTop(tempScrollTop);

                        indicateLastMovedRow(htmlOper);

                        break;
                    }
                }

                didUpdateOperTable = true;

                break;
            }
        }

        if (!didUpdateOperTable) {
            $("#opers").hide();
        }
    }

    function moveOperDown(event, routeStr, operNum) {
        event.preventDefault();

        var didUpdateOperTable = false;

        for (var i = 0; i < model.Routes.length; ++i) {
            var route = model.Routes[i];
            if (route.Route === routeStr) {
                for (var o = 0; o < route.Opers.length; ++o) {
                    var oper = route.Opers[o];

                    if (oper.Oper === operNum) {
                        if (o === (route.Opers.length - 1)) return false;

                        var operToSwap = route.Opers[o + 1];
                        route.Opers[o + 1] = oper;
                        route.Opers[o] = operToSwap;

                        // preserve scroll

                        var tempScrollTop = $(window).scrollTop();

                        var htmlOper = $('#' + trimIllegalIdChars(route.Route) + '-' + oper.Oper.toString());
                        var htmlOperToSwap = $('#' + trimIllegalIdChars(route.Route) + '-' + operToSwap.Oper.toString());

                        htmlOper.insertAfter(htmlOperToSwap);
                        $(window).scrollTop(tempScrollTop);

                        indicateLastMovedRow(htmlOper);

                        break;
                    }
                }

                didUpdateOperTable = true;

                break;
            }
        }

        if (!didUpdateOperTable) {
            $("#opers").hide();
        }
    }

    function editOper(routeStr, operNum) {
        alert('Would edit: ' + routeStr + ' / ' + operNum.toString());
    }
